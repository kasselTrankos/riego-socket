
> socket@1.0.0 test /Users/aotn/riego-socket
> mocha

left; { a: 180, b: 12, moved: 0 } right { a: 4, b: 0, moved: 0 }
left; { a: 134, b: 109 } right { a: 11, b: 2 }
left; { a: 212, b: 1 } right { a: 190, b: 112 }
left; { a: 1901, b: 2 } right { a: 1, b: 12 }
ppppppppppppp [ { a: 4, b: 0, moved: 0 },
  { a: 180, b: 12, moved: 0 },
  { a: 11, b: 2 },
  { a: 134, b: 109 },
  { a: 190, b: 112 },
  { a: 212, b: 1 },
  { a: 1, b: 12 },
  { a: 1901, b: 2 } ]
left; { a: 180, b: 12, moved: 1 } right { a: 4, b: 0, moved: 1 }
left; { a: 134, b: 109 } right { a: 11, b: 2 }
left; { a: 212, b: 1 } right { a: 190, b: 112 }
left; { a: 1901, b: 2 } right { a: 1, b: 12 }
ppppppppppppp [ { a: 4, b: 0, moved: 1 },
  { a: 180, b: 12, moved: 1 },
  { a: 11, b: 2 },
  { a: 134, b: 109 },
  { a: 190, b: 112 },
  { a: 212, b: 1 },
  { a: 1, b: 12 },
  { a: 1901, b: 2 } ]
left; { a: 180, b: 12, moved: 2 } right { a: 4, b: 0, moved: 2 }
left; { a: 134, b: 109 } right { a: 11, b: 2 }
left; { a: 212, b: 1 } right { a: 190, b: 112 }
left; { a: 1901, b: 2 } right { a: 1, b: 12 }
ppppppppppppp [ { a: 4, b: 0, moved: 2 },
  { a: 180, b: 12, moved: 2 },
  { a: 11, b: 2 },
  { a: 134, b: 109 },
  { a: 190, b: 112 },
  { a: 212, b: 1 },
  { a: 1, b: 12 },
  { a: 1901, b: 2 } ]
left; { a: 180, b: 12, moved: 3 } right { a: 4, b: 0, moved: 3 }
left; { a: 134, b: 109 } right { a: 11, b: 2 }
left; { a: 212, b: 1 } right { a: 190, b: 112 }
left; { a: 1901, b: 2 } right { a: 1, b: 12 }
ppppppppppppp [ { a: 4, b: 0, moved: 3 },
  { a: 180, b: 12, moved: 3 },
  { a: 11, b: 2 },
  { a: 134, b: 109 },
  { a: 190, b: 112 },
  { a: 212, b: 1 },
  { a: 1, b: 12 },
  { a: 1901, b: 2 } ]
left; { a: 180, b: 12, moved: 4 } right { a: 4, b: 0, moved: 4 }
left; { a: 134, b: 109 } right { a: 11, b: 2 }
left; { a: 212, b: 1 } right { a: 190, b: 112 }
left; { a: 1901, b: 2 } right { a: 1, b: 12 }
ppppppppppppp [ { a: 4, b: 0, moved: 4 },
  { a: 180, b: 12, moved: 4 },
  { a: 11, b: 2 },
  { a: 134, b: 109 },
  { a: 190, b: 112 },
  { a: 212, b: 1 },
  { a: 1, b: 12 },
  { a: 1901, b: 2 } ]
left; { a: 180, b: 12, moved: 5 } right { a: 4, b: 0, moved: 5 }
left; { a: 134, b: 109 } right { a: 11, b: 2 }
left; { a: 212, b: 1 } right { a: 190, b: 112 }
left; { a: 1901, b: 2 } right { a: 1, b: 12 }
ppppppppppppp [ { a: 4, b: 0, moved: 5 },
  { a: 180, b: 12, moved: 5 },
  { a: 11, b: 2 },
  { a: 134, b: 109 },
  { a: 190, b: 112 },
  { a: 212, b: 1 },
  { a: 1, b: 12 },
  { a: 1901, b: 2 } ]
left; { a: 180, b: 12, moved: 6 } right { a: 4, b: 0, moved: 6 }
left; { a: 134, b: 109 } right { a: 11, b: 2 }
left; { a: 212, b: 1 } right { a: 190, b: 112 }
left; { a: 1901, b: 2 } right { a: 1, b: 12 }
ppppppppppppp [ { a: 4, b: 0, moved: 6 },
  { a: 180, b: 12, moved: 6 },
  { a: 11, b: 2 },
  { a: 134, b: 109 },
  { a: 190, b: 112 },
  { a: 212, b: 1 },
  { a: 1, b: 12 },
  { a: 1901, b: 2 } ]
left; { a: 180, b: 12, moved: 7 } right { a: 4, b: 0, moved: 7 }
left; { a: 134, b: 109 } right { a: 11, b: 2 }
left; { a: 212, b: 1 } right { a: 190, b: 112 }
left; { a: 1901, b: 2 } right { a: 1, b: 12 }
ppppppppppppp [ { a: 4, b: 0, moved: 7 },
  { a: 180, b: 12, moved: 7 },
  { a: 11, b: 2 },
  { a: 134, b: 109 },
  { a: 190, b: 112 },
  { a: 212, b: 1 },
  { a: 1, b: 12 },
  { a: 1901, b: 2 } ]
[ { a: 180, b: 12, moved: 7 },
  { a: 4, b: 0, moved: 7 },
  { a: 11, b: 2 },
  { a: 134, b: 109 },
  { a: 190, b: 112 },
  { a: 212, b: 1 },
  { a: 1, b: 12 },
  { a: 1901, b: 2 } ] '000000' [ { a: 180, b: 12, moved: 7 },
  { a: 4, b: 0, moved: 7 },
  { a: 11, b: 2 },
  { a: 134, b: 109 },
  { a: 190, b: 112 },
  { a: 212, b: 1 },
  { a: 1, b: 12 },
  { a: 1901, b: 2 } ]
i: 0 , j: 0
i: 0 , j: 1
i: 0 , j: 2
i: 0 , j: 3
i: 0 , j: 4
i: 0 , j: 5
i: 1 , j: 0
i: 1 , j: 1
i: 1 , j: 2
i: 1 , j: 3
i: 1 , j: 4
i: 1 , j: 5
i: 2 , j: 0
i: 2 , j: 1
i: 2 , j: 2
i: 2 , j: 3
i: 2 , j: 4
i: 2 , j: 5
i: 3 , j: 0
i: 3 , j: 1
i: 3 , j: 2
i: 3 , j: 3
i: 3 , j: 4
i: 3 , j: 5
i: 4 , j: 0
i: 4 , j: 1
i: 4 , j: 2
i: 4 , j: 3
i: 4 , j: 4
i: 4 , j: 5
i: 5 , j: 0
i: 5 , j: 1
i: 5 , j: 2
i: 5 , j: 3
i: 5 , j: 4
i: 5 , j: 5


  Irrigation => 
    ✓ testSomeIdentity
    ✓ testConsIdentity
    ✓ testConsComposition
    ✓ testSomeComposition

  RiegoArb => 
    - testTotality
    - testAntisymmetry
    - ordTestTransitivity
    - testAssociativity
    - testLeftIdentity
    - testRightIdentity
    - testLeftInverse
    - testRightInverse
    - testReflexivity
    - testSymmetry
    - testTransitivity

  Riegos  => 
    - testIdentity
    - testComposition
    - testAnnihilation
    - testDistributivity
    - testIdentityFilterable


  4 passing (50ms)
  16 pending

